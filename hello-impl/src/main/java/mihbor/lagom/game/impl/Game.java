package mihbor.lagom.game.impl;

import java.util.Optional;
import java.util.Arrays;

import com.google.gdata.util.common.base.Preconditions;
import com.lightbend.lagom.javadsl.persistence.PersistentEntity;

import mihbor.lagom.game.api.*;
import mihbor.lagom.game.api.GameEvent.*;

public class Game extends PersistentEntity<GameCommand, GameEvent, GameState> {

	@Override
	public PersistentEntity<GameCommand, GameEvent, GameState>.Behavior initialBehavior(Optional<GameState> snapshot) {
		
		BehaviorBuilder b = newBehaviorBuilder(snapshot.orElse(GameState.EMPTY));
		
		proposeGameBehavior(b);
		joinGameBehavior(b);
		startGameBehavior(b);
		endTurnBehavior(b);
		commonEventHandlers(b);
		
		return b.build();
	}

	private void proposeGameBehavior(PersistentEntity<GameCommand, GameEvent, GameState>.BehaviorBuilder b) {

		b.setCommandHandler(
			ProposeGameCmd.class, 
			(cmd, ctx) -> {
				GameProposedEvent gameProposed = GameProposedEvent.of(cmd.getGameId());
				if(state() == GameState.EMPTY) {
					return ctx.thenPersist(gameProposed, evt -> ctx.reply(evt));
				} else { // already proposed, we're idempotent, so reply GameProposed
					assert state().gameId == cmd.getGameId(); // this must hold as this is the identifier for this entity!
					ctx.reply(gameProposed);
					return ctx.done();
				}
			}
		);
		
		b.setEventHandler(GameProposedEvent.class, evt -> state().gameProposed(evt.getGameId()));
	}

	private void joinGameBehavior(PersistentEntity<GameCommand, GameEvent, GameState>.BehaviorBuilder b) {
		
		b.setCommandHandler(
			JoinGameCmd.class, 
			(cmd, ctx) -> {
				PlayerJoinedGameEvent playerJoined = PlayerJoinedGameEvent
					.of(state().gameId, cmd.getPlayerId());
				// idempotency again
				if(!state().hasPlayer(cmd.getPlayerId())) {
					return ctx.thenPersist(playerJoined, evt -> ctx.reply(evt));
				} else {
					ctx.reply(playerJoined);
					return ctx.done();
				}
			}
		);
		
		b.setEventHandler(PlayerJoinedGameEvent.class, evt -> state().playerJoinedGame(evt.getPlayerId()));
	}
	
	private void startGameBehavior(PersistentEntity<GameCommand, GameEvent, GameState>.BehaviorBuilder b) {
		
		b.setCommandHandler(
			StartGameCmd.class, 
			(cmd, ctx) -> {
				Preconditions.checkState(state().getPlayerCount() > 0, "can't start game without at least one player");
				GameStartedEvent gameStarted = GameStartedEvent.of(state().gameId);
				if(!state().isStarted) {
					PlayersTurnBegun playersTurnBegun = PlayersTurnBegunEvent
						.of(state().gameId, state().getNextTurnsPlayersId(), 0);
					return ctx.thenPersistAll(
						Arrays.asList(gameStarted, playersTurnBegun),
						() -> ctx.reply(gameStarted)
					);
				} else {
					ctx.reply(gameStarted);
					return ctx.done();
				}
			}
		);
		
		b.setEventHandler(GameStartedEvent.class, evt -> state().gameStarted());
	}

	private void endTurnBehavior(PersistentEntity<GameCommand, GameEvent, GameState>.BehaviorBuilder b) {
		
		b.setCommandHandler(
			EndTurnCmd.class,
			(cmd, ctx) -> {
				if(cmd.getTurn() == state().turn && cmd.getPlayerId().equals(state().getCurrentTurnsPlayersId())) {
					PlayersTurnEndedEvent playersTurnEnded = PlayersTurnEndedEvent
						.of(state().gameId, cmd.getPlayerId(), state().turn);
					PlayersTurnBegunEvent playersTurnBegun = PlayersTurnBegunEvent
						.of(state().gameId, state().getNextTurnsPlayersId(), state().turn+1);
					return ctx.thenPersistAll(
						Arrays.asList(playersTurnEnded, playersTurnBegun), 
						() -> ctx.reply(playersTurnEnded)
					);
				} else if(cmd.getTurn() == state().turn-1 && cmd.getPlayerId().equals(state().getPreviousTurnsPlayerId())) {
					//idempotency
					ctx.reply(PlayersTurnEndedEvent.of(state().gameId, cmd.getPlayerId(), cmd.getTurn()));
					return ctx.done();
				} else {
					ctx.invalidCommand("not your turn to end");
					return ctx.done();
				}
			}
		);
		
		b.setEventHandler(PlayersTurnEndedEvent.class, evt -> state().playersTurnEnded(evt.getPlayerId()));
	}

	private void commonEventHandlers(PersistentEntity<GameCommand, GameEvent, GameState>.BehaviorBuilder b) {
		
		// this event is generated by both StartGame and EndTurn commands:
		b.setEventHandler(PlayersTurnBegunEvent.class, evt -> state().playersTurnBegun(evt.getPlayerId(), evt.getTurn()));
	}
	
}
